" vim: set fdm=marker expandtab ts=2 sw=2:
"  _  __          _         ____             _     _
" | |/ /_____   _(_)_ __   |  _ \ _   _ _ __| |__ (_)_ __
" | ' // _ \ \ / / | '_ \  | | | | | | | '__| '_ \| | '_ \
" | . \  __/\ V /| | | | | | |_| | |_| | |  | |_) | | | | |
" |_|\_\___| \_/ |_|_| |_| |____/ \__,_|_|  |_.__/|_|_| |_|
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

" {{{ Plugins
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'             " a good place to start

Plug 'acepukas/vim-zenburn'           " theme

Plug 'kevindurb/vim-splits'           " split settings and keymaps
Plug 'kevindurb/vim-whiteout'         " show trailing whitespace
Plug 'kevindurb/vim-statusline'       " statusline

Plug 'tpope/vim-commentary'           " sweet commenting
Plug 'tpope/vim-fugitive'             " git commands in vim
Plug 'tpope/vim-repeat'               " repeating plugin commands
Plug 'tpope/vim-surround'             " surround with things
Plug 'tpope/vim-unimpaired'           " mappings for things with '['
Plug 'tpope/vim-vinegar'              " browse directories with -
Plug 'tpope/vim-dispatch'             " add backgrounding

Plug 'joonty/vdebug'                  " debugging!
Plug 'christoomey/vim-tmux-navigator' " navigate panes in tmux && vim
Plug 'sheerun/vim-polyglot'           " all the syntax files!
Plug 'w0rp/ale'                       " syntax and style checking
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'galooshi/vim-import-js'

call plug#end()
" }}}

" {{{ Plugin Settings
" ale settings
let g:ale_linters = {
\ 'graphql': ['gqlint'],
\ 'javascript': ['eslint', 'flow'],
\ 'javascript jsx': ['eslint', 'flow'],
\ 'css': ['stylelint'],
\}
let g:ale_php_phpcs_standard = '--standard=/Users/kdurbin/Development/churchcommunitybuilder/app/src/phpcs_ruleset.xml'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'normal'

" vdebug
let g:vdebug_options = {}
let g:vdebug_options['path_maps'] = {
\ '/var/www/app': '/Users/kdurbin/Development/churchcommunitybuilder/app'
\ }
let g:vdebug_options['server'] = ''
let g:vdebug_options['ide_key'] = 'vagrant'
let g:vdebug_options['break_on_open'] = 0
let g:vdebug_options['continuous_mode'] = 0
let g:vdebug_options['watch_window_style'] = 'compact'
let g:vdebug_features = {}
let g:vdebug_features['max_children'] = 1024

" toggle vdebug settings
function! ToggleVDebugOption(opt)
  if g:vdebug_options[a:opt] == 0
    let g:vdebug_options[a:opt] = 1
    echo 'VDebug ' . a:opt . ': On'
  else
    let g:vdebug_options[a:opt] = 0
    echo 'VDebug ' . a:opt . ': Off'
  endif
endfunction

" }}}

" {{{ Base Editor Config
set title                       " set title in terminal
set wildmode=longest:list,full  " make command completion more like zsh
set autowrite                   " save when you change buffers
set clipboard=unnamed           " copy and paste in system clipboard
set showtabline=2               " always show the tabline
set complete+=kspell            " add dictionary to completion
set tags=tags;/                 " make ctags look up from cwd for tags file
set nowrap                      " NO WRAPPING LINES
set smartindent                 " auto indents c-like blocks
set shiftround                  " round indent to shiftwidth
set cursorline                  " turn on cursor horizontal line
set colorcolumn=80              " color line at 80 columns
set number                      " but still show current line number
set relativenumber              " show relative line numbers
set showmatch                   " highlight matching brace
set ignorecase                  " ignore search case
set smartcase                   " dont ignore case once you use a capital
set hlsearch                    " highlight all search matches
set undolevels=1000             " holds last 1000 undos
set backupdir=$HOME/.vim/backup " backup files in one place
set directory=$HOME/.vim/backup " swp files in one place
set path=.,src                  " gf search current dir and src dir
set suffixesadd=.js,/index.js   " gf try adding .js to files
" }}}

" {{{ Colorscheme
set background=dark
colorscheme zenburn
" }}}

" {{{ Custom Commands
command! MakeTags !ctags -R .
" }}}

" {{{ Searching
" if you have rg use rg for vimgrep and ctrlp
if executable('rg')
  " use rg instead of grep
  set grepprg=rg\ --vimgrep
endif

" Rg command for searching in vim
command! -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!

" K keymap for searching word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}

" {{{ File Type Settings
" make js files identify as ts
augroup filetypedetect
  au BufRead,BufNewFile *.js set filetype=typescript
augroup END

" set markdown to 80 characters wide
au BufRead,BufNewFile *.md setlocal textwidth=80

" spelling in markdown and commit messages
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell

" folding xml files
augroup XML
  autocmd!
  autocmd FileType xml setlocal foldmethod=indent
augroup END
" }}}

" {{{ Indent Settings
set tabstop=2                   " columns per tab
set shiftwidth=2                " spaces per indent
set softtabstop=2               " spaces per tab
set expandtab                   " use soft tabs
set smartindent                 " auto indents c-like blocks
set shiftround                  " round indent to shiftwidth

augroup language_tabbing
  autocmd!
  autocmd Filetype php        setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype css        setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype html       setlocal ts=2 sts=2 sw=2 expandtab
augroup END
" }}}

" {{{ Keymaps
" remap leader
let mapleader=','

" reload vimrc
nnoremap <leader>r :so $HOME/.vim/vimrc<CR>

" vdebug options
map <Leader>dc :call ToggleVDebugOption('continuous_mode')<CR>
map <Leader>db :call ToggleVDebugOption('break_on_open')<CR>

" fzf
nnoremap <C-p> :FZF<CR>
" }}}
