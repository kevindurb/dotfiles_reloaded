" #################################################################################################
" Plug ############################################################################################
" #################################################################################################

" we are iMproved
set nocompatible

" give me a home variable to work with
let $VIMHOME = $HOME."/.vim"

" start plug
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'                " a good place to start

Plug 'fxn/vim-monochrome'                " color scheme
Plug 'vim-airline/vim-airline'           " pretty status line
Plug 'vim-airline/vim-airline-themes'    " pretty status line themes

Plug 'tpope/vim-commentary'              " sweet commenting
Plug 'tpope/vim-repeat'                  " better repeating plugin commands
Plug 'tpope/vim-surround'                " surround with things
Plug 'tpope/vim-vinegar'                 " use minus (-) to go up a dir

Plug 'airblade/vim-gitgutter'            " git status in gutter
Plug 'chip/vim-fat-finger'               " easy fixes for my bad lesdixia
Plug 'ctrlpvim/ctrlp.vim'                " find files quickly
Plug 'ervandew/supertab'                 " trigger completion with tab
Plug 'kshenoy/vim-signature'             " show marks in gutter
Plug 'matchit.zip'                       " matching with % for more things
Plug 'ntpeters/vim-better-whitespace'    " show extra whitespace
Plug 'Raimondi/delimitMate'              " auto complete brackets and quotes
Plug 'rstacruz/sparkup', {'rtp': 'vim/'} " easily create html from css selectors
Plug 'scrooloose/syntastic'              " syntax linter
Plug 'sheerun/vim-polyglot'              " all the syntax files!
Plug 'skammer/vim-css-color'             " turns hex and rgb into colors
Plug 'terryma/vim-multiple-cursors'      " multiple cursors in vim

" end plug
call plug#end()

" #################################################################################################
" Plugin Settings #################################################################################
" #################################################################################################

" syntastic settings
let g:syntastic_error_symbol='❌'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_mode_map={ 'mode': 'active', 'passive_filetypes': ['css', 'scss'] }
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 1

" syntastic javascript
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_jsx_checkers = ['eslint']

" syntastic html settings
let g:syntastic_html_validator_parser='html'
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute "]

" autoclose
let g:AutoCloseExpandSpace = 0

" airline look pretty
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#whitespace#enabled=0
let g:airline_left_sep=''
let g:airline_right_sep=''

" dont echo the bufferline
let g:bufferline_echo = 0

" dont match carrots
let delimitMate_matchpairs = "(:),[:],{:}"

" ctrl p exclude
let g:ctrlp_root_markers = ['package.json', '.eslintrc.js', '.tern-project']

" #################################################################################################
" Vim Settings ####################################################################################
" #################################################################################################

" special file types
augroup special_file_types
  autocmd!
  autocmd BufRead,BufNewFile *.scss set ft=scss
  autocmd BufRead,BufNewFile *.ejs set ft=html
augroup END

" change the cursor in different modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Silver Searcher shortcut
cabbrev ag Ag

" fix my constant need to type Wa instead of wa
cabbrev Wa wa
cabbrev Wq wq
cabbrev Wqa wqa
cabbrev W w
cabbrev Q q

" add line numbers
set number

" show the status line
set noshowmode

" more natural split directions
set splitbelow
set splitright

" tab stuff
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smartindent
set shiftround

" per language tabbing
augroup language_tabbing
  autocmd!
  autocmd Filetype php        setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype scss       setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype css        setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype ruby       setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype html       setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype coffee     setlocal foldmethod=indent nofoldenable
augroup END

" run sparkup for jsx
augroup sparkup_types
  autocmd!
  autocmd Filetype javascript runtime! ftplugin/html/sparkup.vim
augroup END

" various stuff
set autowrite  " save when you change buffers
set cursorline " turn on cursor horizontal line
set nowrap     " NO WRAPPING LINES
set showmatch  " highlight matching brace
set wildmode=longest:list,full

" make search awesome
set ignorecase " ignore search case
set smartcase  " dont ignore case once you use a capital letter
set hlsearch   " highlight all search matches
set incsearch  " jump to search

" copy and paste in system clipboard
set clipboard=unnamed

" go back forever!
set history=1000
set undolevels=1000

" change backup dir
set backupdir=$VIMHOME/backup
set directory=$VIMHOME/backup

" change the term title
set title

" no more freaking bells!
set visualbell
set noerrorbells

" color line at 100 columns
set colorcolumn=100

" colorscheme stuff
set background=dark
colorscheme monochrome

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" #################################################################################################
" Keymaps #########################################################################################
" #################################################################################################

" map leader to comma for speed!!!
let mapleader=","

" choose buffer faster
map <leader>bn :bnext<CR>
map <leader>bp :bprev<CR>
map <leader>bd :bdel<CR>

" location list stuff
map <leader>ll :ll<CR>
map <leader>ln :lnext<CR>
map <leader>lp :lprev<CR>

" pane control
nnoremap <leader>v		 :vsp<CR>
nnoremap <leader><S-v> :sp<CR>
nnoremap <leader>z		 <c-w>o

" pane resizing
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" disable arrow keys
inoremap <up>	    <nop>
inoremap <down>	  <nop>
inoremap <left>	  <nop>
inoremap <right>	<nop>
nnoremap <up>	    <nop>
nnoremap <down>	  <nop>
nnoremap <left>	  <nop>
nnoremap <right>	<nop>
vnoremap <up>	    <nop>
vnoremap <down>	  <nop>
vnoremap <left>	  <nop>
vnoremap <right>	<nop>

" awesome moving between buffers
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
inoremap <C-h> <C-w><C-h>
inoremap <C-j> <C-w><C-j>
inoremap <C-k> <C-w><C-k>
inoremap <C-l> <C-w><C-l>
vnoremap <C-h> <C-w><C-h>
vnoremap <C-j> <C-w><C-j>
vnoremap <C-k> <C-w><C-k>
vnoremap <C-l> <C-w><C-l>

" K will Ag word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" folding fun
	" shortcut to fold an HTML tag
nnoremap <leader>ft Vatzf
	" shortcut to fold braces (must be inside braces to fold)
nnoremap <leader>fb zfa{

" shortcut for Silver Searcher
nnoremap <C-g> :Ag<space>

" stop doing ex mode
" nnoremap Q gq

" insert filename
inoremap <leader>fn <C-R>=expand("%:t")<CR>

" save session
nnoremap <leader>s :mksession! session.vim<CR>

" remove highlight
nnoremap <leader>n :noh<CR>

" switch between relative and absolute line numbers
function! NumberToggle()
  if(&relativenumber ==1)
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<CR>
